/**
 * Powercord, a lightweight @discordapp client mod focused on simplicity and performance
 * Copyright (C) 2018-2020  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const { getModuleByDisplayName } = require('powercord/webpack');
const AsyncComponent = require('./AsyncComponent');

require('fs')
  .readdirSync(__dirname)
  .filter(file => file !== 'index.js')
  .forEach(filename => {
    const moduleName = filename.split('.')[0];
    exports[moduleName] = require(`${__dirname}/${filename}`);
  });

// Add some util components
Object.assign(exports, {
  Icon: () => {
    // @todo: Make all icons be local, or at least get rid of this garbage.
    if (window.__powercord_debug_legacy_icon__) {
      console.warn('[Powercord] Tried to render Discord\'s Icon component.');
    }
    return null;
  },
  Button: AsyncComponent.from(getModuleByDisplayName('DropdownButton')),
  FormNotice: AsyncComponent.from(getModuleByDisplayName('FormNotice')),
  Card: AsyncComponent.from(getModuleByDisplayName('Card')),
  Clickable: AsyncComponent.from(getModuleByDisplayName('Clickable')),
  Switch: AsyncComponent.from(getModuleByDisplayName('Switch')),
  Spinner: AsyncComponent.from(getModuleByDisplayName('Spinner')),
  Divider: AsyncComponent.from(getModuleByDisplayName('FormDivider')),
  FormTitle: AsyncComponent.from(getModuleByDisplayName('FormTitle')),
  HeaderBar: AsyncComponent.from(getModuleByDisplayName('HeaderBar')),
  TabBar: AsyncComponent.from(getModuleByDisplayName('TabBar')),
  Text: AsyncComponent.from(getModuleByDisplayName('Text'))
});

// Re-export module properties
(async () => {
  const FormNotice = await getModuleByDisplayName('FormNotice', true, true);
  const Button = await getModuleByDisplayName('DropdownButton', true, true);
  const HeaderBar = await getModuleByDisplayName('HeaderBar', true, true);
  // const Icon = await getModuleByDisplayName('Icon', true, true);
  const Card = await getModuleByDisplayName('Card', true, true);
  const TabBar = await getModuleByDisplayName('TabBar', true, true);
  const Text = await getModuleByDisplayName('Text', true, true);
  console.log(FormNotice);
  [ 'Colors', 'Family', 'Sizes', 'Weights' ].forEach(prop => exports.Text[prop] = Text[prop]);
  [ 'Types', 'Header', 'Item', 'Separator' ].forEach(prop => exports.TabBar[prop] = TabBar[prop]);
  [ 'DropdownSizes', 'Sizes', 'Colors', 'Looks' ].forEach(prop => exports.Button[prop] = Button[prop]);
  [ 'Icon', 'Title', 'Divider' ].forEach(prop => exports.HeaderBar[prop] = HeaderBar[prop]);
  // [ 'Names' ].forEach(prop => exports.Icon[prop] = Icon[prop]);
  [ 'Types' ].forEach(prop => exports.FormNotice[prop] = FormNotice[prop]);
  [ 'Types' ].forEach(prop => exports.Card[prop] = Card[prop]);
})();
