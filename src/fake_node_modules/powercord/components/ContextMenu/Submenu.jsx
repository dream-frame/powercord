/**
 * Powercord, a lightweight @discordapp client mod focused on simplicity and performance
 * Copyright (C) 2018-2020  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const { React, getModuleByDisplayName } = require('powercord/webpack');

const Base = require('./Base');
const SubMenuItem = getModuleByDisplayName('FluxContainer(SubMenuItem)', false)
  .prototype.render.call({ memoizedGetStateFromStores: () => ({}) }).type;

module.exports = class SubmenuItem extends Base {
  constructor () {
    super();

    SubMenuItem.call(this);

    this.state = {
      items: []
    };
  }

  async componentDidMount () {
    const items = await this.props.getItems();
    this.setState({ items });
  }

  componentWillUnmount () {
    clearTimeout(this._timer);
  }

  render () {
    this.renderChildren();

    const res = SubMenuItem.prototype.render.call(this);
    if (!res) {
      return null;
    }

    res.props.children[0].props.children = this.props.name;
    res.props.children.splice(1, 0, React.createElement('div', {
      className: this.classes.hint
    }, this.props.hint));

    this.props.action = this.props.onClick;
    this.component = res;

    return super.render();
  }

  renderChildren () {
    return this.props.render = () => [ ...this.state.items.map(props => {
      switch (props.type) {
        case 'slider':
          return <Base.SliderItem {...props} />;

        case 'button':
          return <Base.ButtonItem {...props} />;

        case 'submenu':
          return <SubmenuItem {...props} />;

        case 'checkbox':
          return <Base.CheckboxItem {...props} />;

        default:
          return null;
      }
    }) ];
  }
};
