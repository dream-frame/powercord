/**
 * Powercord, a lightweight @discord client mod focused on simplicity and performance
 * Copyright (C) 2018-2020  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const { React, contextMenu } = require('powercord/webpack');
const { getOwnerInstance, waitFor } = require('powercord/util');
const { FontAwesome } = require('../Icons');

const Base = require('./Base');

module.exports = class ButtonItem extends Base {
  constructor () {
    super();

    waitFor(`.${this.classes.app}`).then(app => this.appOwnerInstance = getOwnerInstance(app));
  }

  handleOnClick () {
    if (this.props.disabled) {
      this.appOwnerInstance.shake(600, 5);
    } else if (this.props.onClick) {
      this.props.onClick();
    }

    contextMenu.closeContextMenu();
  }

  render () {
    const { props } = this;
    this.component = React.createElement('div', {
      className: this.filter([ this.classes.item, props.image && this.classes.itemImage, this.classes[!props.disabled ? 'clickable' : 'disabled'] ]),
      style: props.style,
      onClick: this.handleOnClick.bind(this)
    }, React.createElement('span', {
      className: this.classes.label,
      style: { color: props.highlight }
    }, props.name), this.renderHintIcon());

    return super.render();
  }

  renderHintIcon () {
    if (this.props.image) {
      return React.createElement('img', {
        src: this.props.image,
        className: this.filter([ this.props.imageClassName, this.classes.image ]),
        alt: ''
      });
    } else if (this.props.icon) {
      return React.createElement(FontAwesome, { icon: this.props.icon });
    }

    return React.createElement('div', { className: this.classes.hint }, this.props.hint);
  }
};
