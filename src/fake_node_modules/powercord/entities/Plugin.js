/**
 * Powercord, a lightweight @discordapp client mod focused on simplicity and performance
 * Copyright (C) 2018-2020  aetheryx & Bowser65
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

const { sleep } = require('powercord/util');
const Updatable = require('./Updatable');

class Plugin extends Updatable {
  constructor () {
    super(powercord.pluginManager.pluginDir);
    this.settings = powercord.api.settings.buildCategoryObject(this.entityID);
    this.ready = false;

    this.registered = {
      styles: [],
      settings: [],
      commands: [],
      keybinds: [],
      routes: [],
      toasts: [],
      announcements: [],
      rpcScopes: [],
      rpcEvents: []
    };
  }

  // Getters
  get isInternal () {
    return this.entityID.startsWith('pc-');
  }

  get dependencies () {
    return this.manifest.dependencies;
  }

  get optionalDependencies () {
    return this.manifest.optionalDependencies;
  }

  get effectiveOptionalDependencies () {
    const deps = this.manifest.optionalDependencies;
    const disabled = powercord.settings.get('disabledPlugins', []);
    return deps.filter(d => powercord.pluginManager.get(d) !== void 0 && !disabled.includes(d));
  }

  get allDependencies () {
    return this.dependencies.concat(this.optionalDependencies);
  }

  get allEffectiveDependencies () {
    return this.dependencies.concat(this.effectiveOptionalDependencies);
  }

  get dependents () {
    const dependents = [ ...powercord.pluginManager.plugins.values() ].filter(p => p.manifest.dependencies.includes(this.entityID));
    return [ ...new Set(dependents.map(d => d.entityID).concat(...dependents.map(d => d.dependents))) ];
  }

  get experiments () {
    const settings = Object.keys(powercord.api.settings.store.getSettings(this.entityID));
    return settings.filter(setting => (/__experimental_\d{4}-(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|3[01])/).test(setting));
  }

  // Internals
  async _load () {
    try {
      while (!this.allEffectiveDependencies.every(pluginName => powercord.pluginManager.get(pluginName).ready)) {
        await sleep(1);
      }

      if (typeof this.startPlugin === 'function') {
        await this.startPlugin();
      }

      this.ready = true;
      this.log('Plugin loaded');
    } catch (e) {
      this.error('An error occurred during initialization!', e);
      this.ready = true;
    }
  }

  async _unload () {
    this.registered.styles.forEach(style => powercord.styleManager.unmount(style));
    this.registered.settings.forEach(tab => powercord.api.settings.unregisterTab(tab));
    this.registered.commands.forEach(command => powercord.api.commands.unregisterCommand(command));
    this.registered.keybinds.forEach(keybind => powercord.api.keybinds.unregisterKeybind(keybind));
    this.registered.routes.forEach(path => powercord.api.router.unregisterRoute(path));
    this.registered.toasts.forEach(toast => powercord.api.notices.closeToast(toast));
    this.registered.announcements.forEach(announcement => powercord.api.notices.closeAnnouncement(announcement));
    this.registered.rpcScopes.forEach(scope => powercord.api.rpc.unregisterScope(scope));
    this.registered.rpcEvents.forEach(evt => powercord.api.rpc.unregisterEvent(evt));

    try {
      if (typeof this.pluginWillUnload === 'function') {
        await this.pluginWillUnload();
      }

      this.ready = false;
      this.log('Plugin unloaded');
    } catch (e) {
      this.error('An error occurred during shutting down! It\'s heavily recommended reloading Discord to ensure there are no conflicts.', e);
    }
  }

  // Utilities
  registerSettings (section, displayName, render, connectStore = true) {
    this.registered.settings.push(section);
    powercord.api.settings.registerTab(this.entityID, section, displayName, render, connectStore);
  }

  registerCommand (command, aliases, description, usage, func, autocompleteFunc) {
    this.registered.commands.push(command);
    powercord.api.commands.registerCommand(command, aliases || [], description, usage, func, autocompleteFunc);
  }

  registerKeybind (id, name, description, func, keybind, global = false) {
    this.registered.keybinds.push(id);
    powercord.api.keybinds.registerKeybind(id, name, description, func, keybind, global);
  }

  updateKeybind (id, keybind) {
    this.registered.keybinds.push(id);
    powercord.api.keybinds.updateKeybind(id, keybind);
  }

  registerRoute (path, render, noSidebar = false) {
    this.registered.routes.push(path);
    powercord.api.router.registerRoute(path, render, noSidebar);
  }

  sendToast (id, props) {
    this.registered.toasts.push(id);
    powercord.api.notices.sendToast(id, props);
  }

  closeToast (id) {
    this.registered.toasts = this.registered.toasts.filter(t => t !== id);
    powercord.api.notices.closeToast(id);
  }

  sendAnnouncement (id, props) {
    this.registered.announcements.push(id);
    powercord.api.notices.sendAnnouncement(id, props);
  }

  closeAnnouncement (id) {
    this.registered.announcements = this.registered.announcements.filter(t => t !== id);
    powercord.api.notices.closeAnnouncement(id);
  }

  registerRPCScope (scope, grant) {
    this.registered.rpcScopes.push(scope);
    powercord.api.rpc.registerScope(scope, grant);
  }

  unregisterRPCScope (scope) {
    this.registered.rpcScopes = this.registered.rpcScopes.filter(s => s !== scope);
    powercord.api.rpc.unregisterScope(scope);
  }

  registerRPCEvent (event, handler) {
    this.registered.rpcEvents.push(event);
    powercord.api.rpc.registerEvent(event, handler);
  }

  unregisterRPCEvent (event) {
    this.registered.rpcEvents = this.registered.rpcEvents.filter(e => e !== event);
    powercord.api.rpc.unregisterEvent(event);
  }

  loadCSS (id, path) {
    if (path === void 0) {
      path = id;
      id = this.entityID;
    }

    this.registered.styles.push(id);
    powercord.styleManager.loadPluginCSS(id, path);
  }

  // Logging
  log (...data) {
    console.log(`%c[Powercord:Plugin:${this.constructor.name}]`, 'color: #7289da', ...data);
  }

  debug (...data) {
    console.debug(`%c[Powercord:Plugin:${this.constructor.name}]`, 'color: #7289da', ...data);
  }

  warn (...data) {
    console.warn(`%c[Powercord:Plugin:${this.constructor.name}]`, 'color: #7289da', ...data);
  }

  error (...data) {
    console.error(`%c[Powercord:Plugin:${this.constructor.name}]`, 'color: #7289da', ...data);
  }

  // Update
  async _update (force = false) {
    const success = await super._update(force);
    if (success && this.ready) {
      await powercord.pluginManager.remount(this.entityID);
    }
    return success;
  }
}

module.exports = Plugin;
